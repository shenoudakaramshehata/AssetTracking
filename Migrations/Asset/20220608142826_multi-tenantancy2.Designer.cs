// <auto-generated />
using System;
using AssetProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AssetProject.Migrations.Asset
{
    [DbContext(typeof(AssetContext))]
    [Migration("20220608142826_multi-tenantancy2")]
    partial class multitenantancy2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AssetProject.Models.ActionLog", b =>
                {
                    b.Property<int>("ActionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionLogTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionLogId");

                    b.ToTable("ActionLogs");

                    b.HasData(
                        new
                        {
                            ActionLogId = 1,
                            ActionLogTitle = "Asset Purchase"
                        },
                        new
                        {
                            ActionLogId = 2,
                            ActionLogTitle = "Creation Link Contract"
                        },
                        new
                        {
                            ActionLogId = 3,
                            ActionLogTitle = "Creation Link Insurance"
                        },
                        new
                        {
                            ActionLogId = 4,
                            ActionLogTitle = "Creation Link Document"
                        },
                        new
                        {
                            ActionLogId = 5,
                            ActionLogTitle = "Add New Asset Photo"
                        },
                        new
                        {
                            ActionLogId = 6,
                            ActionLogTitle = "Dettached Asset Contract"
                        },
                        new
                        {
                            ActionLogId = 7,
                            ActionLogTitle = "Dettached Asset Insurance"
                        },
                        new
                        {
                            ActionLogId = 8,
                            ActionLogTitle = "Dettached Asset Document"
                        },
                        new
                        {
                            ActionLogId = 9,
                            ActionLogTitle = "Delete Asset Photo"
                        },
                        new
                        {
                            ActionLogId = 10,
                            ActionLogTitle = "Sell Asset"
                        },
                        new
                        {
                            ActionLogId = 11,
                            ActionLogTitle = "Dispose Asset "
                        },
                        new
                        {
                            ActionLogId = 12,
                            ActionLogTitle = "Broken Asset"
                        },
                        new
                        {
                            ActionLogId = 13,
                            ActionLogTitle = "Repair Asset"
                        },
                        new
                        {
                            ActionLogId = 14,
                            ActionLogTitle = "Asset Lost"
                        },
                        new
                        {
                            ActionLogId = 15,
                            ActionLogTitle = "Asset Leasing"
                        },
                        new
                        {
                            ActionLogId = 16,
                            ActionLogTitle = "CheckIn"
                        },
                        new
                        {
                            ActionLogId = 17,
                            ActionLogTitle = "CheckOut"
                        },
                        new
                        {
                            ActionLogId = 18,
                            ActionLogTitle = "Asset Maintainance"
                        },
                        new
                        {
                            ActionLogId = 19,
                            ActionLogTitle = "Asset Edited"
                        },
                        new
                        {
                            ActionLogId = 20,
                            ActionLogTitle = "Add Asset Waranty"
                        },
                        new
                        {
                            ActionLogId = 21,
                            ActionLogTitle = "Deattach Asset Waranty"
                        },
                        new
                        {
                            ActionLogId = 22,
                            ActionLogTitle = "Edit Asset Maintainance"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionTypeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionTypes");

                    b.HasData(
                        new
                        {
                            ActionTypeId = 1,
                            ActionTypeTitle = "Employee"
                        },
                        new
                        {
                            ActionTypeId = 2,
                            ActionTypeTitle = "Department"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AssetCost")
                        .HasColumnType("float");

                    b.Property<string>("AssetDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetLife")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssetPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssetSerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AssetTagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateAcquired")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DepreciableAsset")
                        .HasColumnType("bit");

                    b.Property<double?>("DepreciableCost")
                        .HasColumnType("float");

                    b.Property<int?>("DepreciationMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SalvageValue")
                        .HasColumnType("float");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("AssetId");

                    b.HasIndex("AssetSerialNo")
                        .IsUnique();

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("AssetTagId")
                        .IsUnique();

                    b.HasIndex("DepreciationMethodId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StoreId");

                    b.HasIndex("VendorId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("AssetProject.Models.AssetBroken", b =>
                {
                    b.Property<int>("AssetBrokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateBroken")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetBrokenId");

                    b.ToTable("assetBrokens");
                });

            modelBuilder.Entity("AssetProject.Models.AssetBrokenDetails", b =>
                {
                    b.Property<int>("AssetBrokenDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetBrokenId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetBrokenDetailsId");

                    b.HasIndex("AssetBrokenId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetBrokenDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetContract", b =>
                {
                    b.Property<int>("AssetContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.HasKey("AssetContractID");

                    b.HasIndex("AssetId");

                    b.HasIndex("ContractId");

                    b.ToTable("AssetContracts");
                });

            modelBuilder.Entity("AssetProject.Models.AssetDisposeDetails", b =>
                {
                    b.Property<int>("AssetDisposeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("DisposeAssetId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetDisposeDetailsId");

                    b.HasIndex("AssetId");

                    b.HasIndex("DisposeAssetId");

                    b.ToTable("AssetDisposeDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetDocument", b =>
                {
                    b.Property<int>("AssetDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetDocumentId");

                    b.HasIndex("AssetId");

                    b.ToTable("assetDocuments");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLeasing", b =>
                {
                    b.Property<int>("AssetLeasingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("LeasedCost")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetLeasingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AssetLeasings");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLeasingDetails", b =>
                {
                    b.Property<int>("AssetLeasingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetLeasingId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetLeasingDetailsId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetLeasingId");

                    b.ToTable("AssetLeasingDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLog", b =>
                {
                    b.Property<int>("AssetLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionLogId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetLogId");

                    b.HasIndex("ActionLogId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetLogs");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLost", b =>
                {
                    b.Property<int>("AssetLostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLost")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetLostId");

                    b.ToTable("AssetLosts");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLostDetails", b =>
                {
                    b.Property<int>("AssetLostDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetLostId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetLostDetailsId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetLostId");

                    b.ToTable("AssetLostDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMaintainance", b =>
                {
                    b.Property<int>("AssetMaintainanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssetMaintainanceDateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssetMaintainanceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssetMaintainanceDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssetMaintainanceFrequencyId")
                        .HasColumnType("int");

                    b.Property<double>("AssetMaintainanceRepairesCost")
                        .HasColumnType("float");

                    b.Property<bool>("AssetMaintainanceRepeating")
                        .HasColumnType("bit");

                    b.Property<string>("AssetMaintainanceTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaintainanceStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyDay")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int?>("WeekDayId")
                        .HasColumnType("int");

                    b.Property<int?>("WeeklyPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyDay")
                        .HasColumnType("int");

                    b.HasKey("AssetMaintainanceId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetMaintainanceFrequencyId");

                    b.HasIndex("MaintainanceStatusId");

                    b.HasIndex("MonthId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("WeekDayId");

                    b.ToTable("AssetMaintainances");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMaintainanceFrequency", b =>
                {
                    b.Property<int>("AssetMaintainanceFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetMaintainanceFrequencyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetMaintainanceFrequencyId");

                    b.ToTable("AssetMaintainanceFrequencies");

                    b.HasData(
                        new
                        {
                            AssetMaintainanceFrequencyId = 1,
                            AssetMaintainanceFrequencyTitle = "Daily"
                        },
                        new
                        {
                            AssetMaintainanceFrequencyId = 2,
                            AssetMaintainanceFrequencyTitle = "Weekly"
                        },
                        new
                        {
                            AssetMaintainanceFrequencyId = 3,
                            AssetMaintainanceFrequencyTitle = "Monthly"
                        },
                        new
                        {
                            AssetMaintainanceFrequencyId = 4,
                            AssetMaintainanceFrequencyTitle = "Yearly"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.AssetMovement", b =>
                {
                    b.Property<int>("AssetMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetMovementDirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmpolyeeID")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetMovementId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("AssetMovementDirectionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmpolyeeID");

                    b.HasIndex("LocationId");

                    b.HasIndex("StoreId");

                    b.ToTable("AssetMovements");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMovementDetails", b =>
                {
                    b.Property<int>("AssetMovementDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetMovementId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetMovementDetailsId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetMovementId");

                    b.ToTable("AssetMovementDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMovementDirection", b =>
                {
                    b.Property<int>("AssetMovementDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetMovementDirectionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetMovementDirectionId");

                    b.ToTable("AssetMovementDirections");

                    b.HasData(
                        new
                        {
                            AssetMovementDirectionId = 1,
                            AssetMovementDirectionTitle = "CheckOut"
                        },
                        new
                        {
                            AssetMovementDirectionId = 2,
                            AssetMovementDirectionTitle = "CheckIn"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.AssetPhotos", b =>
                {
                    b.Property<int>("AssetPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetPhotoId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetPhotos");
                });

            modelBuilder.Entity("AssetProject.Models.AssetRepair", b =>
                {
                    b.Property<int>("AssetRepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RepairCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.HasKey("AssetRepairId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("AssetRepairs");
                });

            modelBuilder.Entity("AssetProject.Models.AssetRepairDetails", b =>
                {
                    b.Property<int>("AssetRepairDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetRepairId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetRepairDetailsId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetRepairId");

                    b.ToTable("AssetRepairDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetSellDetails", b =>
                {
                    b.Property<int>("AssetSellDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellAssetId")
                        .HasColumnType("int");

                    b.HasKey("AssetSellDetailsId");

                    b.HasIndex("AssetId");

                    b.HasIndex("SellAssetId");

                    b.ToTable("AssetSellDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetStatus", b =>
                {
                    b.Property<int>("AssetStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetStatusTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetStatusId");

                    b.ToTable("AssetStatuses");

                    b.HasData(
                        new
                        {
                            AssetStatusId = 1,
                            AssetStatusTitle = "CheckedIn(Avaliable)"
                        },
                        new
                        {
                            AssetStatusId = 2,
                            AssetStatusTitle = "CheckedOut"
                        },
                        new
                        {
                            AssetStatusId = 3,
                            AssetStatusTitle = "InRepair"
                        },
                        new
                        {
                            AssetStatusId = 4,
                            AssetStatusTitle = "Lost"
                        },
                        new
                        {
                            AssetStatusId = 5,
                            AssetStatusTitle = "Disposed"
                        },
                        new
                        {
                            AssetStatusId = 6,
                            AssetStatusTitle = "Leased"
                        },
                        new
                        {
                            AssetStatusId = 7,
                            AssetStatusTitle = "Sold"
                        },
                        new
                        {
                            AssetStatusId = 8,
                            AssetStatusTitle = "Broken"
                        },
                        new
                        {
                            AssetStatusId = 9,
                            AssetStatusTitle = "InMaintainance"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.AssetWarranty", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarrantyId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetWarranties");
                });

            modelBuilder.Entity("AssetProject.Models.AssetsInsurance", b =>
                {
                    b.Property<int>("AssetsInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.HasKey("AssetsInsuranceId");

                    b.HasIndex("AssetId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("AssetsInsurances");
                });

            modelBuilder.Entity("AssetProject.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("TenantId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("AssetProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryTIAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AssetProject.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ContractId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AssetProject.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AssetProject.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AssetProject.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("TenantId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AssetProject.Models.DepreciationMethod", b =>
                {
                    b.Property<int>("DepreciationMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepreciationMethodTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepreciationMethodId");

                    b.ToTable("DepreciationMethods");

                    b.HasData(
                        new
                        {
                            DepreciationMethodId = 1,
                            DepreciationMethodTitle = "Straight Line"
                        },
                        new
                        {
                            DepreciationMethodId = 2,
                            DepreciationMethodTitle = "Declining Balance"
                        },
                        new
                        {
                            DepreciationMethodId = 3,
                            DepreciationMethodTitle = "Double Declining Balance"
                        },
                        new
                        {
                            DepreciationMethodId = 4,
                            DepreciationMethodTitle = "150% Declining Balance"
                        },
                        new
                        {
                            DepreciationMethodId = 5,
                            DepreciationMethodTitle = "Sum of the Years' Digits"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.DisposeAsset", b =>
                {
                    b.Property<int>("DisposeAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDisposed")
                        .HasColumnType("date");

                    b.Property<string>("DisposeTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisposeAssetId");

                    b.ToTable("DisposeAssets");
                });

            modelBuilder.Entity("AssetProject.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TenantId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AssetProject.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Deductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Permium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuranceId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("AssetProject.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AssetProject.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("LocationLangtiude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationLatitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationParentId")
                        .HasColumnType("int");

                    b.Property<string>("LocationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationParentId");

                    b.HasIndex("TenantId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AssetProject.Models.MaintainanceStatus", b =>
                {
                    b.Property<int>("MaintainanceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintainanceStatusTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintainanceStatusId");

                    b.ToTable("MaintainanceStatuses");

                    b.HasData(
                        new
                        {
                            MaintainanceStatusId = 1,
                            MaintainanceStatusTitle = "Scheduled"
                        },
                        new
                        {
                            MaintainanceStatusId = 2,
                            MaintainanceStatusTitle = "In Progress"
                        },
                        new
                        {
                            MaintainanceStatusId = 3,
                            MaintainanceStatusTitle = "On Hold"
                        },
                        new
                        {
                            MaintainanceStatusId = 4,
                            MaintainanceStatusTitle = "Cancelled"
                        },
                        new
                        {
                            MaintainanceStatusId = 5,
                            MaintainanceStatusTitle = "Completed"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.Month", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MonthTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonthId");

                    b.ToTable("Months");

                    b.HasData(
                        new
                        {
                            MonthId = 1,
                            MonthTitle = "January"
                        },
                        new
                        {
                            MonthId = 2,
                            MonthTitle = "February"
                        },
                        new
                        {
                            MonthId = 3,
                            MonthTitle = "March"
                        },
                        new
                        {
                            MonthId = 4,
                            MonthTitle = "April"
                        },
                        new
                        {
                            MonthId = 5,
                            MonthTitle = "May"
                        },
                        new
                        {
                            MonthId = 6,
                            MonthTitle = "June"
                        },
                        new
                        {
                            MonthId = 7,
                            MonthTitle = "July"
                        },
                        new
                        {
                            MonthId = 8,
                            MonthTitle = "August"
                        },
                        new
                        {
                            MonthId = 9,
                            MonthTitle = "September"
                        },
                        new
                        {
                            MonthId = 10,
                            MonthTitle = "October"
                        },
                        new
                        {
                            MonthId = 11,
                            MonthTitle = "November"
                        },
                        new
                        {
                            MonthId = 12,
                            MonthTitle = "December"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<double?>("Net")
                        .HasColumnType("float");

                    b.Property<string>("PurchaseSerial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Purchasedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("StoreId");

                    b.HasIndex("VendorId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("AssetProject.Models.PurchaseAsset", b =>
                {
                    b.Property<int>("PurchaseAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double?>("Net")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("PurchaseAssetId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseAssets");
                });

            modelBuilder.Entity("AssetProject.Models.SellAsset", b =>
                {
                    b.Property<int>("SellAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SaleAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SoldTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SellAssetId");

                    b.ToTable("sellAssets");
                });

            modelBuilder.Entity("AssetProject.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tele")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("AssetProject.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("AssetProject.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("AssetProject.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId");

                    b.HasIndex("CountryId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("AssetProject.Models.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.HasIndex("BrandId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("AssetProject.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("AssetProject.Models.WeekDay", b =>
                {
                    b.Property<int>("WeekDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WeekDayTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeekDayId");

                    b.ToTable("WeekDays");

                    b.HasData(
                        new
                        {
                            WeekDayId = 1,
                            WeekDayTitle = "Saturday"
                        },
                        new
                        {
                            WeekDayId = 2,
                            WeekDayTitle = "Sunday"
                        },
                        new
                        {
                            WeekDayId = 3,
                            WeekDayTitle = "Monday"
                        },
                        new
                        {
                            WeekDayId = 4,
                            WeekDayTitle = "Tuesday"
                        },
                        new
                        {
                            WeekDayId = 5,
                            WeekDayTitle = "Wednesday"
                        },
                        new
                        {
                            WeekDayId = 6,
                            WeekDayTitle = "Thursday"
                        },
                        new
                        {
                            WeekDayId = 7,
                            WeekDayTitle = "Friday"
                        });
                });

            modelBuilder.Entity("AssetProject.Models.Asset", b =>
                {
                    b.HasOne("AssetProject.Models.AssetStatus", "AssetStatus")
                        .WithMany()
                        .HasForeignKey("AssetStatusId");

                    b.HasOne("AssetProject.Models.DepreciationMethod", "DepreciationMethod")
                        .WithMany()
                        .HasForeignKey("DepreciationMethodId");

                    b.HasOne("AssetProject.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("AssetProject.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("AssetStatus");

                    b.Navigation("DepreciationMethod");

                    b.Navigation("Item");

                    b.Navigation("Store");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AssetProject.Models.AssetBrokenDetails", b =>
                {
                    b.HasOne("AssetProject.Models.AssetBroken", "AssetBroken")
                        .WithMany("AssetBrokenDetails")
                        .HasForeignKey("AssetBrokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetBrokenDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetBroken");
                });

            modelBuilder.Entity("AssetProject.Models.AssetContract", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetContracts")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.Navigation("Asset");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("AssetProject.Models.AssetDisposeDetails", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetDisposeDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.DisposeAsset", "DisposeAsset")
                        .WithMany("AssetDisposeDetails")
                        .HasForeignKey("DisposeAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("DisposeAsset");
                });

            modelBuilder.Entity("AssetProject.Models.AssetDocument", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("documents")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLeasing", b =>
                {
                    b.HasOne("AssetProject.Models.Customer", "Customer")
                        .WithMany("AssetLeasings")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLeasingDetails", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetLeasingDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.AssetLeasing", "AssetLeasing")
                        .WithMany("AssetLeasingDetails")
                        .HasForeignKey("AssetLeasingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetLeasing");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLog", b =>
                {
                    b.HasOne("AssetProject.Models.ActionLog", "ActionLog")
                        .WithMany()
                        .HasForeignKey("ActionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionLog");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLostDetails", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetLostDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.AssetLost", "AssetLost")
                        .WithMany("AssetLostDetails")
                        .HasForeignKey("AssetLostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetLost");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMaintainance", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.AssetMaintainanceFrequency", "AssetMaintainanceFrequency")
                        .WithMany()
                        .HasForeignKey("AssetMaintainanceFrequencyId");

                    b.HasOne("AssetProject.Models.MaintainanceStatus", "MaintainanceStatus")
                        .WithMany()
                        .HasForeignKey("MaintainanceStatusId");

                    b.HasOne("AssetProject.Models.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId");

                    b.HasOne("AssetProject.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.HasOne("AssetProject.Models.WeekDay", "WeekDay")
                        .WithMany()
                        .HasForeignKey("WeekDayId");

                    b.Navigation("Asset");

                    b.Navigation("AssetMaintainanceFrequency");

                    b.Navigation("MaintainanceStatus");

                    b.Navigation("Month");

                    b.Navigation("Technician");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMovement", b =>
                {
                    b.HasOne("AssetProject.Models.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId");

                    b.HasOne("AssetProject.Models.AssetMovementDirection", "AssetMovementDirection")
                        .WithMany()
                        .HasForeignKey("AssetMovementDirectionId");

                    b.HasOne("AssetProject.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("AssetProject.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpolyeeID");

                    b.HasOne("AssetProject.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("AssetProject.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ActionType");

                    b.Navigation("AssetMovementDirection");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Location");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMovementDetails", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetMovementDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.AssetMovement", "AssetMovement")
                        .WithMany("AssetMovementDetails")
                        .HasForeignKey("AssetMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetMovement");
                });

            modelBuilder.Entity("AssetProject.Models.AssetPhotos", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetPhotos")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetProject.Models.AssetRepair", b =>
                {
                    b.HasOne("AssetProject.Models.Technician", "Technician")
                        .WithMany("AssetRepairs")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("AssetProject.Models.AssetRepairDetails", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetRepairDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.AssetRepair", "AssetRepair")
                        .WithMany("AssetRepairDetails")
                        .HasForeignKey("AssetRepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetRepair");
                });

            modelBuilder.Entity("AssetProject.Models.AssetSellDetails", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetSellDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.SellAsset", "SellAsset")
                        .WithMany("AssetSellDetails")
                        .HasForeignKey("SellAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("SellAsset");
                });

            modelBuilder.Entity("AssetProject.Models.AssetWarranty", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("Warranty")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetProject.Models.AssetsInsurance", b =>
                {
                    b.HasOne("AssetProject.Models.Asset", "Asset")
                        .WithMany("AssetsInsurances")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.Navigation("Asset");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("AssetProject.Models.Brand", b =>
                {
                    b.HasOne("AssetProject.Models.Tenant", "tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("AssetProject.Models.Category", b =>
                {
                    b.HasOne("AssetProject.Models.Tenant", "tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("AssetProject.Models.Contract", b =>
                {
                    b.HasOne("AssetProject.Models.Vendor", "Vendor")
                        .WithMany("Cotracts")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AssetProject.Models.Department", b =>
                {
                    b.HasOne("AssetProject.Models.Tenant", "tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("AssetProject.Models.Employee", b =>
                {
                    b.HasOne("AssetProject.Models.Tenant", "tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("AssetProject.Models.Item", b =>
                {
                    b.HasOne("AssetProject.Models.Brand", "Brand")
                        .WithMany("Items")
                        .HasForeignKey("BrandId");

                    b.HasOne("AssetProject.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AssetProject.Models.Type", null)
                        .WithMany("Items")
                        .HasForeignKey("TypeId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AssetProject.Models.Location", b =>
                {
                    b.HasOne("AssetProject.Models.Location", "LocationParent")
                        .WithMany("InverseLocationParent")
                        .HasForeignKey("LocationParentId");

                    b.HasOne("AssetProject.Models.Tenant", "tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("LocationParent");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("AssetProject.Models.Purchase", b =>
                {
                    b.HasOne("AssetProject.Models.Store", "Store")
                        .WithMany("Purchases")
                        .HasForeignKey("StoreId");

                    b.HasOne("AssetProject.Models.Vendor", "Vendor")
                        .WithMany("Purchases")
                        .HasForeignKey("VendorId");

                    b.Navigation("Store");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AssetProject.Models.PurchaseAsset", b =>
                {
                    b.HasOne("AssetProject.Models.Item", "Item")
                        .WithMany("PurchaseAssets")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Purchase", "Purchase")
                        .WithMany("PurchaseAssets")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("AssetProject.Models.SubCategory", b =>
                {
                    b.HasOne("AssetProject.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetProject.Models.Tenant", "tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Category");

                    b.Navigation("tenant");
                });

            modelBuilder.Entity("AssetProject.Models.Tenant", b =>
                {
                    b.HasOne("AssetProject.Models.Country", "Country")
                        .WithMany("Tenants")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AssetProject.Models.Type", b =>
                {
                    b.HasOne("AssetProject.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("AssetProject.Models.Asset", b =>
                {
                    b.Navigation("AssetBrokenDetails");

                    b.Navigation("AssetContracts");

                    b.Navigation("AssetDisposeDetails");

                    b.Navigation("AssetLeasingDetails");

                    b.Navigation("AssetLostDetails");

                    b.Navigation("AssetMovementDetails");

                    b.Navigation("AssetPhotos");

                    b.Navigation("AssetRepairDetails");

                    b.Navigation("AssetSellDetails");

                    b.Navigation("AssetsInsurances");

                    b.Navigation("documents");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("AssetProject.Models.AssetBroken", b =>
                {
                    b.Navigation("AssetBrokenDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLeasing", b =>
                {
                    b.Navigation("AssetLeasingDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetLost", b =>
                {
                    b.Navigation("AssetLostDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetMovement", b =>
                {
                    b.Navigation("AssetMovementDetails");
                });

            modelBuilder.Entity("AssetProject.Models.AssetRepair", b =>
                {
                    b.Navigation("AssetRepairDetails");
                });

            modelBuilder.Entity("AssetProject.Models.Brand", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AssetProject.Models.Category", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("AssetProject.Models.Country", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("AssetProject.Models.Customer", b =>
                {
                    b.Navigation("AssetLeasings");
                });

            modelBuilder.Entity("AssetProject.Models.DisposeAsset", b =>
                {
                    b.Navigation("AssetDisposeDetails");
                });

            modelBuilder.Entity("AssetProject.Models.Item", b =>
                {
                    b.Navigation("PurchaseAssets");
                });

            modelBuilder.Entity("AssetProject.Models.Location", b =>
                {
                    b.Navigation("InverseLocationParent");
                });

            modelBuilder.Entity("AssetProject.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseAssets");
                });

            modelBuilder.Entity("AssetProject.Models.SellAsset", b =>
                {
                    b.Navigation("AssetSellDetails");
                });

            modelBuilder.Entity("AssetProject.Models.Store", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("AssetProject.Models.Technician", b =>
                {
                    b.Navigation("AssetRepairs");
                });

            modelBuilder.Entity("AssetProject.Models.Type", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AssetProject.Models.Vendor", b =>
                {
                    b.Navigation("Cotracts");

                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
