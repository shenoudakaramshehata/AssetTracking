@page
@model AssetProject.Areas.Admin.Pages.Reports.PrintAssetCheckOutModel
@{
}

<div class="slim-mainpanel">
    <div class="container">
        <div class="slim-pageheader">
            <ol class="breadcrumb slim-breadcrumb">
                <li class="breadcrumb-item"><a href="#">@sharedResource["Home"]</a></li>
                <li class="breadcrumb-item"><a href="#">@sharedResource["Reports"]</a></li>
                <li class="breadcrumb-item active" aria-current="page">@sharedResource["Asset Check Out Report"]</li>
            </ol>
            <h6 class="slim-pagetitle">@sharedResource["Asset Check Out"]</h6>
        </div><!-- slim-pageheader -->



        <div class="row row-sm row-timeline">
            <div class="col-lg-3  mg-lg-t-0">
                <div class="card pd-20 mg-t-20">
                    <label class="slim-card-title">@sharedResource["Filter"]</label>
                    <div class="post-group">
                        @using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
                        {
                            @(Html.DevExtreme().TreeView()
                        .DataSource(ds => ds.Mvc()
                        .Controller("Locations")
                        .LoadAction("Get")
                        .Key("LocationId")
                        )
                        .DisplayExpr("LocationTitle")
                        .ItemsExpr("Items")
                        .ExpandedExpr("Expanded")
                        .KeyExpr("LocationId")
                        .ParentIdExpr("LocationParentId")
                        .DataStructure(TreeViewDataStructure.Plain)
                        .SelectionMode(NavSelectionMode.Single)
                        .SelectByClick(true)
                        .Height(235)
                        .OnItemClick(@<text>
                                function(args) {
                                component.close();
                                }
                            </text>)
                        .OnItemSelectionChanged(@<text>
                                function(args) {
                                component.option("value", args.component.getSelectedNodeKeys());
                                }
                            </text>)
                        .OnContentReady(@<text>
                                function(args) {
                                syncTreeViewSelection(args.component, component.option("value"));
                                }
                            </text>)
                        )
                        }

                        @using (Html.BeginForm(FormMethod.Post))


                            @(Html.DevExtreme().Form<AssetProject.ReportModels.FilterModel>()
                                .FormData(Model.filterModel)
                                .LabelMode(FormLabelMode.Outside)
            .LabelLocation(FormLabelLocation.Top)
    .Items(items => {
        items.AddSimpleFor(m => m.ShowAll).IsRequired(false).Label(m => m.Text(sharedResource["Show All"]));
        items.AddSimpleFor(m => m.FromDate).IsRequired(false).Label(l => l.Text(sharedResource["From Day"]));
        items.AddSimpleFor(m => m.ToDate).IsRequired(false).Label(l => l.Text(sharedResource["To Day"]));

        items.AddSimpleFor(m => m.AssetTagId).IsRequired(false).Label(l => l.Text(sharedResource["AssetTagId"]));

        items.AddSimpleFor(m => m.LocationId).IsRequired(false).Label(l => l.Text(sharedResource["Location"]))
        .Editor(e => e
         .DropDownBox()
         .ID("locationTree")
       .ValueExpr("Value")
      .DisplayExpr("Text")
      .DropDownOptions(o => o.Height(350))
      .DataSource(d => d.WebApi()
      .Controller("Lookups")
      .LoadAction("LocationsLookup")
     .LoadMode(DataSourceLoadMode.Raw)
      .Key("Value")
        )
      .Placeholder(sharedResource["Select a value..."])
      .ShowClearButton(true)
      .OnValueChanged("treeBox_valueChanged")
      .ContentTemplate(new TemplateName("EmbeddedTreeViewSingle"))
      );



        //.Lookup()
        //.DataSource(ds => ds.WebApi().Controller("Lookups").LoadAction("LocationsLookup").Key("Value"))
        //.ValueExpr("Value")
        //.DisplayExpr("Text").Placeholder(sharedResource["Select Location"])
        //                                .ShowClearButton(true)
        //                                .ClearButtonText(sharedResource["Clear"])
        //                                .CancelButtonText(sharedResource["Cancel"])
        //                                .SearchPlaceholder(sharedResource["searching"])
        //);
        items.AddSimpleFor(m => m.employeeId).IsRequired(false).Label(l => l.Text(sharedResource["Employee"]))
        .Editor(e => e
        .Lookup()
        .DataSource(ds => ds.WebApi().Controller("Lookups").LoadAction("EmpolyeesLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text").Placeholder(sharedResource["Select Empolyee"])
                                        .ShowClearButton(true)
                                        .ClearButtonText(sharedResource["Clear"])
                                        .CancelButtonText(sharedResource["Cancel"])
                                        .SearchPlaceholder(sharedResource["searching"])
        );

        items.AddSimpleFor(m => m.DepartmentId).IsRequired(false).Label(l => l.Text(sharedResource["Department"]))
       .Editor(e => e
       .Lookup()
       .DataSource(ds => ds.WebApi().Controller("Lookups").LoadAction("DepartmentsLookup").Key("Value"))
       .ValueExpr("Value")
       .DisplayExpr("Text").Placeholder(sharedResource["Select Department"])
                                       .ShowClearButton(true)
                                       .ClearButtonText(sharedResource["Clear"])
                                       .CancelButtonText(sharedResource["Cancel"])
                                       .SearchPlaceholder(sharedResource["searching"])
       );



        items.AddButton()
       .HorizontalAlignment(HorizontalAlignment.Left)
       .ButtonOptions(b => b.Text(sharedResource["Send"])
       .Type(ButtonType.Success)
       .UseSubmitBehavior(true)
       );
    })
)




                    </div><!-- post-group -->
                </div><!-- card -->
            </div>
            <div class="col-lg-9">

                <div class="card pd-30">
                    <div class="timeline-group">
                        @using AssetProject.Reports

                        <link rel="stylesheet" href="~/css/viewer.part.bundle.css" />

                        <script src="~/js/viewer.part.bundle.js"></script>

                        @Html.DevExpress().WebDocumentViewer("DocumentViewer").Height("1000px").Bind(Model.Report)
                    </div><!-- timeline-group -->
                </div><!-- card -->

            </div><!-- col-9 -->
            <!-- col-3 -->
        </div><!-- row -->



    </div><!-- container -->
</div>

<script>
 
    function syncTreeViewSelection(treeView, value) {
        console.log(treeView)
        console.log(value)
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function treeBox_valueChanged(e) {
        console.log("tree")
        var $treeView = e.component.content().find(".dx-treeview");
        console.log($treeView)
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }
    window.addEventListener('DOMContentLoaded', (event) => {
        if (localStorage.getItem("lang") != "") {

            if (localStorage.getItem("lang") == "ar") {
                console.log("In Page")
                drobdownBox = $("#locationTree").dxDropDownBox("instance");
                drobdownBox.option("rtlEnabled", true);
            }
        }
    });
    </script>